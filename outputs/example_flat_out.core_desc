import "rv_base/RV64I.core_desc"

InstructionSet MySet extends RV64I {
    functions {
        extern void raise(signed<32> irq, signed<32> mcause);
        extern void leave(signed<32> priv_lvl);
        extern void wait(signed<32> flag);
        extern unsigned<64> MULW(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="MULW::rd"]] [[inline]];
        extern unsigned<64> ADDW(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="ADDW::rd"]] [[inline]];
        extern unsigned<64> MUL(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="MUL::rd"]] [[inline]];
        extern unsigned<64> ADD(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="ADD::rd"]] [[inline]];
        extern unsigned<64> SUB(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="SUB::rd"]] [[inline]];
        extern unsigned<64> SRAI(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="SRAI::rd"]] [[inline]];
        extern unsigned<64> LW(unsigned<64> rs1_val, unsigned<12> imm) [[instr="LW::rd"]] [[inline]];
        extern unsigned<64> CV_MIN(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="CV_MIN::rd"]] [[inline]];
        extern unsigned<64> CV_MINU(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="CV_MINU::rd"]] [[inline]];
        extern unsigned<64> CV_MAX(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="CV_MAX::rd"]] [[inline]];
        extern unsigned<64> CV_MAXU(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="CV_MAXU::rd"]] [[inline]];
    }
    instructions {
        CV_MIN [[outline]] {
            encoding: 7'b0101011 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.min", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: if (rd != 0) {
                X[rd] = ((signed)(X[rs1]) < (signed)(X[rs2][31:0])) ? X[rs1] : X[rs2][31:0];
            }
        }
        CV_MINU [[outline]] {
            encoding: 7'b0101100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.minu", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: if (rd != 0) {
                X[rd] = ((unsigned)(X[rs1]) < (unsigned)(X[rs2][31:0])) ? X[rs1] : X[rs2][31:0];
            }
        }
        CV_MAX [[outline]] {
            encoding: 7'b0101101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.max", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: if (rd != 0) {
                X[rd] = ((signed)(X[rs1]) > (signed)(X[rs2][31:0])) ? X[rs1] : X[rs2][31:0];
            }
        }
        CV_MAXU [[outline]] {
            encoding: 7'b0101110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.maxu", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: if (rd != 0) {
                X[rd] = ((unsigned)(X[rs1]) > (unsigned)(X[rs2][31:0])) ? X[rs1] : X[rs2][31:0];
            }
        }
        CV_LW_ri_inc [[fuse]] {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0001011;
            assembly: {"cv.lw", "{name(rd)}, {imm12}({name(rs1)}!)"};
            behavior: {
                if (rd != 0) {
                    X[rd] = LW(X[rs1], 0);
                }
                X[rs1] = ADD(X[rs1], imm12);
            }
        }
        CV_MAC [[fuse]] {
            encoding: 7'b1001000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.mac", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: if (rd != 0) {
                X[rd] = (signed<64>)(ADD(X[rd], (signed<64>)(MUL(X[rs1], X[rs2]))));
            }
        }
        CV_MSU [[fuse]] {
            encoding: 7'b1001001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv_msu", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: if (rd != 0) {
                X[rd] = (signed<64>)(SUB(X[rd], (signed<64>)(MUL(X[rs1], X[rs2]))));
            }
        }
        CV_CLIP [[fuse]] {
            encoding: 7'b0111000 :: Iuimm5[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.clip", "{name(rd)}, {name(rs1)}, {Iuimm5}"};
            behavior: if (rd != 0) {
                X[rd] = CV_MIN(CV_MAX(X[rs1], (Iuimm5) ? -(1 << (Iuimm5 - 1)) : -1), (Iuimm5) ? ((1 << (Iuimm5 - 1)) - 1) : 0);
            }
        }
        CV_CLIPU [[fuse]] {
            encoding: 7'b0111001 :: Iuimm5[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.clipu", "{name(rd)}, {name(rs1)}, {Iuimm5}"};
            behavior: if (rd != 0) {
                X[rd] = CV_MINU(CV_MAXU(X[rs1], 0), (Iuimm5) ? ((1 << (Iuimm5 - 1)) - 1) : 0);
            }
        }
        CV_ADDN [[fuse]] {
            encoding: 2'b00 :: Luimm5[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1011011;
            assembly: {"cv.addN", "{name(rd)}, {name(rs1)}, {name(rs2)}, {Luimm5}"};
            behavior: if (rd != 0) {
                X[rd] = SRAI(ADD(X[rs1], X[rs2]), Luimm5);
            }
        }
        LW [[outline]] {
            encoding: imm[11:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0000011;
            assembly: {"lw", "{name(rd)}, {imm}({name(rs1)})"};
            behavior: {
                unsigned<32> load_address = X[rs1 % RFS] + (signed)(imm);
                signed<32> res = (signed<32>)(MEM[load_address]);
                if ((rd % RFS) != 0) {
                    X[rd % RFS] = (unsigned<32>)(res);
                }
            }
        }
        SRAI [[outline]] {
            encoding: 7'b0100000 :: shamt[4:0] :: rs1[4:0] :: 3'b101 :: rd[4:0] :: 7'b0010011;
            assembly: {"srai", "{name(rd)}, {name(rs1)}, {shamt}"};
            behavior: if ((rd % RFS) != 0) {
                X[rd % RFS] = (signed<32>)(X[rs1 % RFS]) >> shamt;
            }
        }
        ADD [[outline]] {
            encoding: 7'b0000000 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0110011;
            assembly: {"add", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: if ((rd % RFS) != 0) {
                X[rd % RFS] = X[rs1 % RFS] + X[rs2 % RFS];
            }
        }
        SUB [[outline]] {
            encoding: 7'b0100000 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0110011;
            assembly: {"sub", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: if ((rd % RFS) != 0) {
                X[rd % RFS] = X[rs1 % RFS] - X[rs2 % RFS];
            }
        }
        ADDW [[outline]] {
            encoding: 7'b0000000 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0111011;
            assembly: {"addw", ""};
            behavior: if ((rd % RFS) != 0) {
                {
                    signed<32> res = (signed<32>)(X[rs1 % RFS]) + (signed<32>)(X[rs2 % RFS]);
                    X[rd % RFS] = (signed<64>)(res);
                }
            }
        }
        MUL [[outline]] {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0110011;
            assembly: {"mul", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: if ((rd % RFS) != 0) {
                {
                    signed res = (signed)((signed)(X[rs1 % RFS])) * (signed)((signed)(X[rs2 % RFS]));
                    X[rd % RFS] = (unsigned)(res);
                }
            }
        }
        MULW [[outline]] {
            encoding: 7'b0000001 :: rs2[4:0] :: rs1[4:0] :: 3'b000 :: rd[4:0] :: 7'b0111011;
            assembly: {"mulw", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: if ((rd % RFS) != 0) {
                X[rd % RFS] = (unsigned)((signed<32>)(((signed<32>)(X[rs1 % RFS]) * (signed<32>)(X[rs2 % RFS]))));
            }
        }
    }
}

