import "RV64I.core_desc"
// import "RISCVBase.core_desc"
import "RVM.core_desc"

InstructionSet MySet extends RV64I {
    functions {
        extern unsigned<64> MULW(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="MULW::rd"]] [[inline]];
        extern unsigned<64> ADDW(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="ADDW::rd"]] [[inline]];
        extern unsigned<64> MUL(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="MUL::rd"]] [[inline]];
        extern unsigned<64> ADD(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="ADD::rd"]] [[inline]];
        extern unsigned<64> SUB(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="SUB::rd"]] [[inline]];
        extern unsigned<64> SRAI(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="SRAI::rd"]] [[inline]];
        extern unsigned<64> LW(unsigned<64> rs1_val, unsigned<12> imm) [[instr="LW::rd"]] [[inline]];
        extern unsigned<64> CV_MIN(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="CV_MIN::rd"]] [[inline]];
        extern unsigned<64> CV_MINU(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="CV_MINU::rd"]] [[inline]];
        extern unsigned<64> CV_MAX(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="CV_MAX::rd"]] [[inline]];
        extern unsigned<64> CV_MAXU(unsigned<64> rs1_val, unsigned<64> rs2_val) [[instr="CV_MAXU::rd"]] [[inline]];
    }
    instructions {

        // instructions needed later
        CV_MIN {
            encoding: 7'b0101011 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.min", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = ((signed)X[rs1] < (signed)X[rs2][31: 0]) ? X[rs1] : X[rs2][31: 0];
            }
        }

        CV_MINU {
            encoding: 7'b0101100 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.minu", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = ((unsigned)X[rs1] < (unsigned)X[rs2][31: 0]) ? X[rs1] : X[rs2][31: 0];
            }
        }

        CV_MAX {
            encoding: 7'b0101101 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.max", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = ((signed)X[rs1] > (signed)X[rs2][31: 0]) ? X[rs1] : X[rs2][31: 0];
            }
        }

        CV_MAXU {
            encoding: 7'b0101110 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.maxu", "{name(rd)}, {name(rs1)}, {name(rs2)}" };
            behavior: {
                if (rd != 0) X[rd] = ((unsigned)X[rs1] > (unsigned)X[rs2][31: 0]) ? X[rs1] : X[rs2][31: 0];
            }
        }

        // candidates for fusion
        MyInst [[fuse]] {
            operands: {
                unsigned<5> rd [[is_reg]] [[reg_class="GPR"]] [[reg_type="s64"]] [[out]];
                unsigned<5> rs1 [[is_reg]] [[reg_class="GPR"]] [[reg_type="s64"]] [[in]];
                unsigned<5> rs2 [[is_reg]] [[reg_class="GPR"]] [[reg_type="s64"]] [[in]];
                unsigned<5> rs3 [[is_reg]] [[reg_class="GPR"]] [[reg_type="s64"]] [[in]];
            }
            encoding: auto;
            assembly: {"myinst", "{name(rd)}, {name(rs1)}, {name(rs2)}, {name(rs3)}"};
            behavior: {
                unsigned<64> rs3_val=X[rs3];
                unsigned<64> rs1_val=X[rs1];
                unsigned<64> rs2_val=X[rs2];
                unsigned<64> outp0=(unsigned<64>)(ADDW((unsigned<64>)(MULW(rs1_val,rs2_val)),rs3_val));
                X[rd]=outp0;

            }
        }

        CV_LW_ri_inc [[fuse]] {
            encoding: imm12[11:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b0001011;
            assembly: {"cv.lw", "{name(rd)}, {imm12}({name(rs1)}!)"};
            behavior: {
                if (rd != 0) X[rd] = LW(X[rs1], 0);
                X[rs1] = ADD(X[rs1], imm12);
            }
        }


        CV_MAC [[fuse]] {
            encoding: 7'b1001000 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.mac", "{name(rd)}, {name(rs1)}, {name(rs2)}"};
            behavior: {
                if (rd != 0) X[rd] = (signed<XLEN>)ADD(X[rd], (signed<XLEN>)MUL(X[rs1], X[rs2]));
            }
        }

        CV_MSU [[fuse]] {
            encoding: 7'b1001001 :: rs2[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly:"{name(rd)}, {name(rs1)}, {name(rs2)}";
            behavior: {
                if (rd != 0) X[rd] = (signed<XLEN>)SUB(X[rd], (signed<XLEN>)MUL(X[rs1], X[rs2]));
            }
        }

        CV_CLIP [[fuse]] {
            encoding: 7'b0111000 :: Iuimm5[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.clip", "{name(rd)}, {name(rs1)}, {Iuimm5}" };
            behavior: {
                if (rd != 0) X[rd] = CV_MIN(CV_MAX(X[rs1], (Iuimm5) ? -(1 << (Iuimm5 - 1)) : -1), (Iuimm5) ? ((1 << (Iuimm5 - 1)) - 1) : 0);
            }
        }

        CV_CLIPU [[fuse]] {
            encoding: 7'b0111001 :: Iuimm5[4:0] :: rs1[4:0] :: 3'b011 :: rd[4:0] :: 7'b0101011;
            assembly: {"cv.clipu", "{name(rd)}, {name(rs1)}, {Iuimm5}" };
            behavior: {
                if (rd != 0) X[rd] = CV_MINU(CV_MAXU(X[rs1], 0), (Iuimm5) ? ((1 << (Iuimm5 - 1)) - 1) : 0);
            }
        }

        CV_ADDN [[fuse]] {
            encoding: 2'b00 :: Luimm5[4:0] :: rs2[4:0] :: rs1[4:0] :: 3'b010 :: rd[4:0] :: 7'b1011011;
            assembly: {"cv.addN", "{name(rd)}, {name(rs1)}, {name(rs2)}, {Luimm5}" };
            behavior: {
                if (rd != 0) X[rd] = SRAI(ADD(X[rs1], X[rs2]), Luimm5);
            }
        }

    }
}
