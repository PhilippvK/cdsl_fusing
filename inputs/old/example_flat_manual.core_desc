import "RV64I.core_desc"

InstructionSet MySet extends RV64I {
    functions {
        unsigned<64> MULW(unsigned<64> rs1_val, unsigned<64> rs2_val) [[inline]] {
            return (signed<64>)(signed<32>)((signed<32>)rs1_val * (signed<32>)rs2_val);
        }
        unsigned<64> ADDW(unsigned<64> rs1_val, unsigned<64> rs2_val) [[inline]] {
            return (signed<64>)(signed<32>)((signed<32>)rs1_val + (signed<32>)rs2_val);
        }
    }
    instructions {
        MyInst [[fuse]] {
            operands: {
                unsigned<5> rd [[is_reg]] [[reg_class="GPR"]] [[reg_type="s64"]] [[out]];
                unsigned<5> rs1 [[is_reg]] [[reg_class="GPR"]] [[reg_type="s64"]] [[in]];
                unsigned<5> rs2 [[is_reg]] [[reg_class="GPR"]] [[reg_type="s64"]] [[in]];
                unsigned<5> rs3 [[is_reg]] [[reg_class="GPR"]] [[reg_type="s64"]] [[in]];
            }
            encoding: auto;
            assembly: {"myinst", "{name(rd)}, {name(rs1)}, {name(rs2)}, {name(rs3)}"};
            behavior: {
                unsigned<64> rs3_val=X[rs3];
                unsigned<64> rs1_val=X[rs1];
                unsigned<64> rs2_val=X[rs2];
                unsigned<64> outp0=(unsigned<64>)(ADDW((unsigned<64>)(MULW(rs1_val,rs2_val)),rs3_val));
                X[rd]=outp0;

            }
        }


    }
}
